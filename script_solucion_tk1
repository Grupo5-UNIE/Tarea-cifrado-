import string

def limpiar_texto(texto):
  """Limpia el texto: convierte a mayúsculas y elimina caracteres no alfabéticos."""
  return texto.upper().translate(str.maketrans('', '', string.punctuation + string.digits + ' '))

def letra_a_numero(letra):
  """Asigna un número a una letra del alfabeto."""
  alfabeto = string.ascii_uppercase
  return alfabeto.index(letra)

def numero_a_letra(numero):
  """Asigna una letra a un número."""
  alfabeto = string.ascii_uppercase
  return alfabeto[numero]

def cifrado_cesar(texto, desplazamiento):
  """Aplica el cifrado César con un desplazamiento dado."""
  resultado = ""
  for caracter in texto:
    if caracter.isalpha():
      num = (letra_a_numero(caracter) + desplazamiento) % 26
      resultado += numero_a_letra(num)
    else:
      resultado += caracter
  return resultado

def analizar_frecuencia(texto):
  """Calcula la frecuencia de cada letra en el texto."""
  conteo_letras = {}
  for letra in texto:
    if letra.isalpha():
      conteo_letras[letra] = conteo_letras.get(letra, 0) + 1
  return conteo_letras

def encontrar_mejor_desplazamiento(texto_cifrado):
  """Encuentra el mejor desplazamiento utilizando análisis de frecuencia."""
  # Frecuencias esperadas en inglés (aproximadas)
  frecuencias_ingles = {'E': 12.7, 'T': 9.06, 'A': 8.12, 'O': 7.51, 'I': 6.95, 'N': 6.75, 'S': 6.33, 'H': 6.09, 'R': 6.02, 'D': 4.25, 'L': 4.03, 'C': 2.78, 'U': 2.76, 'M': 2.41, 'W': 2.36, 'F': 2.23, 'G': 2.02, 'Y': 2.00, 'P': 1.93, 'B': 1.29, 'V': 0.98, 'K': 0.77, 'J': 0.15, 'X': 0.15, 'Q': 0.10, 'Z': 0.07}

  mejor_desplazamiento = 0
  mejor_puntuacion = float('inf')
  for desplazamiento in range(1, 26):
    texto_descifrado = cifrado_cesar(texto_cifrado, -desplazamiento)
    frecuencias = analizar_frecuencia(texto_descifrado)
    # Calcular una métrica de similitud (por ejemplo, suma de diferencias absolutas)
    puntuacion = sum(abs(frecuencias.get(letra, 0) - frecuencias_ingles.get(letra, 0)) for letra in frecuencias_ingles)
    if puntuacion < mejor_puntuacion:
      mejor_desplazamiento = desplazamiento
      mejor_puntuacion = puntuacion

  return mejor_desplazamiento

# Texto cifrado
texto_cifrado = "NOYZU XEOYV ATIZA GZKJC OZNIU JKYZN KENGB KJKIO JKJZN KUAZI USKYU LHGZZ RKYGT JRKJZ UZNKJ KGZNY ULQOT MYGTJ WAKKT YONGB KZNKX KLUXK HKKTG HRKZU IGRRA VUTYZ UXOKY ULVUR OZOIG ROTZX OMAKG TJZGR KYULR OLKGT JJKGZ NZUOR RAYZX GZKZN KQKEZ AXTOT MVUOT ZYOTZ NKKBU RAZOU TGXEJ KBKRU VSKTZ ULIUJ KYZNK NOYZU XEULI UJKYO YYUOT UXJOT GZKRE XOINZ NGZON GBKHK KTLUX IKJZU RKGBK UAZSG TELGY IOTGZ OTMYZ UXOKY CNOIN OTZAX TSKGT YZNGZ SEGII UATZO YTUZJ KLOTO ZOBKO LEUAC UARJR OQKZU LOTJU AZSUX KGHUA ZEUAX LGBUX OZKZG RKUXE UAXLG BUXOZ KIUJK HXKGQ KXZNK TOCUA RJXKL KXEUA ZUZNK ROYZU LLAXZ NKXXK GJOTM CNOIN YNUAR JNKRV ZNUYK XKGJK XYCNU CUARJ ROQKZ UYZAJ EZNKY AHPKI ZOTSU XKJKZ GOR"

# Limpiar el texto
texto_limpio = limpiar_texto(texto_cifrado)

# Encontrar el mejor desplazamiento
mejor_desplazamiento = encontrar_mejor_desplazamiento(texto_limpio)

# Descifrar con el mejor desplazamiento
texto_descifrado = cifrado_cesar(texto_limpio, -mejor_desplazamiento)

# Separar palabras y mostrar el resultado
palabras = texto_descifrado.split()
print("Texto descifrado:", ' '.join(palabras))
print("Desplazamiento utilizado:", mejor_desplazamiento)
